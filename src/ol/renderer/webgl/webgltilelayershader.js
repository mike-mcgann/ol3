// This file is automatically generated, do not edit
goog.provide('ol.renderer.webgl.tilelayer.shader');

goog.require('ol.webgl.shader');



/**
 * @constructor
 * @extends {ol.webgl.shader.Fragment}
 * @struct
 */
ol.renderer.webgl.tilelayer.shader.Fragment = function() {
  goog.base(this, ol.renderer.webgl.tilelayer.shader.Fragment.SOURCE);
};
goog.inherits(ol.renderer.webgl.tilelayer.shader.Fragment, ol.webgl.shader.Fragment);
goog.addSingletonGetter(ol.renderer.webgl.tilelayer.shader.Fragment);


/**
 * @const
 * @type {string}
 */
ol.renderer.webgl.tilelayer.shader.Fragment.DEBUG_SOURCE = 'precision mediump float;\nvarying vec2 v_texCoord;\n\n\nuniform sampler2D u_texture;\nuniform sampler2D u_sourceMap;\nuniform sampler2D u_targetMap;\nuniform int u_enabled;\n\nvoid main(void) {\n  if ( u_enabled == 1 ) {\n       vec4 color = texture2D(u_texture, v_texCoord);\n       if ( color.a == 0.0 ) {\n           gl_FragColor = color;\n       } else {\n           float newIndex = 0.0;\n           for ( float i = 0.00195312; i < 1.0; i += 0.00390625 ) {\n              vec4 other = texture2D(u_sourceMap, vec2(i, 0.5));\n              if ( color.r == other.r && color.g == other.g && color.b == other.b && color.a == other.a ) {\n                  newIndex = i;\n                  break;\n              }\n           }\n           gl_FragColor = texture2D(u_targetMap, vec2(newIndex, 0.5));\n       }\n  } else {\n      gl_FragColor = texture2D(u_texture, v_texCoord);\n  }\n} \n';


/**
 * @const
 * @type {string}
 */
ol.renderer.webgl.tilelayer.shader.Fragment.OPTIMIZED_SOURCE = 'precision mediump float;varying vec2 a;uniform sampler2D e;uniform sampler2D f;uniform sampler2D g;uniform int h;void main(void){if(h==1){ vec4 color=texture2D(e,a);if(color.a==0.0){ gl_FragColor=color;}else{float newIndex=0.0;for(float i=0.00195312;i<1.0;i+=0.00390625){ vec4 other=texture2D(f,vec2(i,0.5));if(color.r==other.r&&color.g==other.g&&color.b==other.b&&color.a==other.a){ newIndex=i;break;}} gl_FragColor=texture2D(g,vec2(newIndex,0.5));}} else{gl_FragColor=texture2D(e,a);}}';


/**
 * @const
 * @type {string}
 */
ol.renderer.webgl.tilelayer.shader.Fragment.SOURCE = goog.DEBUG ?
    ol.renderer.webgl.tilelayer.shader.Fragment.DEBUG_SOURCE :
    ol.renderer.webgl.tilelayer.shader.Fragment.OPTIMIZED_SOURCE;



/**
 * @constructor
 * @extends {ol.webgl.shader.Vertex}
 * @struct
 */
ol.renderer.webgl.tilelayer.shader.Vertex = function() {
  goog.base(this, ol.renderer.webgl.tilelayer.shader.Vertex.SOURCE);
};
goog.inherits(ol.renderer.webgl.tilelayer.shader.Vertex, ol.webgl.shader.Vertex);
goog.addSingletonGetter(ol.renderer.webgl.tilelayer.shader.Vertex);


/**
 * @const
 * @type {string}
 */
ol.renderer.webgl.tilelayer.shader.Vertex.DEBUG_SOURCE = 'varying vec2 v_texCoord;\n\n\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nuniform vec4 u_tileOffset;\n\nvoid main(void) {\n  gl_Position = vec4(a_position * u_tileOffset.xy + u_tileOffset.zw, 0., 1.);\n  v_texCoord = a_texCoord;\n}\n\n\n';


/**
 * @const
 * @type {string}
 */
ol.renderer.webgl.tilelayer.shader.Vertex.OPTIMIZED_SOURCE = 'varying vec2 a;attribute vec2 b;attribute vec2 c;uniform vec4 d;void main(void){gl_Position=vec4(b*d.xy+d.zw,0.,1.);a=c;}';


/**
 * @const
 * @type {string}
 */
ol.renderer.webgl.tilelayer.shader.Vertex.SOURCE = goog.DEBUG ?
    ol.renderer.webgl.tilelayer.shader.Vertex.DEBUG_SOURCE :
    ol.renderer.webgl.tilelayer.shader.Vertex.OPTIMIZED_SOURCE;



/**
 * @constructor
 * @param {WebGLRenderingContext} gl GL.
 * @param {WebGLProgram} program Program.
 * @struct
 */
ol.renderer.webgl.tilelayer.shader.Locations = function(gl, program) {

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_enabled = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_enabled' : 'h');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_sourceMap = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_sourceMap' : 'f');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_targetMap = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_targetMap' : 'g');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_texture = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_texture' : 'e');

  /**
   * @type {WebGLUniformLocation}
   */
  this.u_tileOffset = gl.getUniformLocation(
      program, goog.DEBUG ? 'u_tileOffset' : 'd');

  /**
   * @type {number}
   */
  this.a_position = gl.getAttribLocation(
      program, goog.DEBUG ? 'a_position' : 'b');

  /**
   * @type {number}
   */
  this.a_texCoord = gl.getAttribLocation(
      program, goog.DEBUG ? 'a_texCoord' : 'c');
};
